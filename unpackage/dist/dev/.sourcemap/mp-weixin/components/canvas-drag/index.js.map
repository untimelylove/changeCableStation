{"version":3,"sources":["webpack:///C:/Users/fenghe/Desktop/变电站/变电站/components/canvas-drag/index.vue?d912","webpack:///C:/Users/fenghe/Desktop/变电站/变电站/components/canvas-drag/index.vue?1df4","webpack:///C:/Users/fenghe/Desktop/变电站/变电站/components/canvas-drag/index.vue?5c44","webpack:///C:/Users/fenghe/Desktop/变电站/变电站/components/canvas-drag/index.vue?d35c","uni-app:///components/canvas-drag/index.vue","webpack:///C:/Users/fenghe/Desktop/变电站/变电站/components/canvas-drag/index.vue?4cfc","webpack:///C:/Users/fenghe/Desktop/变电站/变电站/components/canvas-drag/index.vue?63c3"],"names":[],"mappings":"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CA;;AAEA;AACA;AACA;AACA;AACA;AACA,wEArBA,CAqBA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAjBA,MAiBA;AACA;AACA,mFAFA,CAEA;;AAEA;AACA;AACA;AACA;AACA,2BARA,CAQA;;AAEA;AACA;AACA;AACA,GA/PA;;AAiQA,MAjQA,gBAiQA,GAjQA,EAiQA;AACA;AACA,GAnQA,G;;;;AAuQA;AACA,MADA,kBACA;AACA;AACA,iBADA;AAEA,iBAFA;;AAIA,GANA;;AAQA,gBARA;AASA;AACA;AACA,kBADA;AAEA,+CAFA,EADA;;AAKA;AACA,kBADA;AAEA,iBAFA,EALA;;AASA;AACA,kBADA;AAEA,iBAFA,EATA;;AAaA;AACA,kBADA;AAEA,kBAFA,EAbA;;AAiBA;AACA,kBADA;AAEA,kBAFA,EAjBA;;AAqBA;AACA,mBADA;AAEA,oBAFA,EArBA,EATA;;;AAmCA;AACA;AACA,8BADA;AAEA,gBAFA,EADA,EAnCA;;;;AA0CA;;;AAGA,OA7CA,mBA6CA;AACA,oBADA,CACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCANA,CAMA;;AAEA;AACA;AACA,KAhBA,CAgBA;;;AAGA;AACA;AACA,qDArBA,CAqBA;;AAEA;AACA;AACA,KAFA,MAEA;AACA;AACA,KA3BA,CA2BA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAJA,MAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GA7FA;;AA+FA;;;;AAIA,aAnGA,yBAmGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAnHA;;AAqHA;;;;;;;AAOA,YA5HA,sBA4HA,GA5HA,EA4HA,CA5HA,EA4HA,CA5HA,EA4HA;AACA;AACA;AACA;AACA,GAhIA;;AAkIA;;;;;AAKA,WAvIA,qBAuIA,CAvIA,EAuIA,CAvIA,EAuIA;AACA;AACA;AACA,kBAHA,CAGA;;AAEA;;AAEA;AACA,2DARA,CAQA;;AAEA;AACA;;AAEA,8HAbA,CAaA;;;AAGA;AACA,iEAjBA,CAiBA;;AAEA;AACA;AACA;AACA;AACA,oEAJA,CAIA;;AAEA;AACA;AACA,4EARA,CAQA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAHA,MAGA;AACA;AACA;AACA,KAHA,MAGA;AACA;AACA,KAxCA,CAwCA;;;AAGA;AACA,GAnLA;;AAqLA;;;;;;AAMA,eA3LA,yBA2LA,MA3LA,EA2LA,SA3LA,EA2LA;AACA;AACA,oBADA;AAEA;;AAEA;AACA;AACA,uBADA;AAEA;AACA,uBADA;AAEA;AACA;AACA;;AAEA;AACA,GA1MA;;AA4MA;;;;AAIA,eAhNA,2BAgNA;AACA;AACA,GAlNA;;AAoNA;;;;;;;;;;AAUA,cA9NA,wBA8NA,CA9NA,EA8NA,CA9NA,EA8NA,OA9NA,EA8NA,OA9NA,EA8NA,OA9NA,EA8NA;AACA;AACA;AACA;AACA,GAlOA;;AAoOA;;;;;;;;AAQA,WA5OA,qBA4OA,EA5OA,EA4OA,EA5OA,EA4OA,CA5OA,EA4OA,CA5OA,EA4OA,YA5OA,EA4OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BALA,CAKA;;AAEA;AACA;AACA,KATA,MASA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wEArBA,CAqBA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAjBA,MAiBA;AACA;AACA,mFAFA,CAEA;;AAEA;AACA;AACA;AACA;AACA,4BARA,CAQA;;AAEA;AACA;AACA;AACA,GAxSA;;AA0SA,MA1SA,gBA0SA,GA1SA,EA0SA;AACA;AACA,GA5SA;;AA8SA,aA9SA,yBA8SA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAzTA;;AA2TA,SA3TA,qBA2TA;AACA;AACA,sBADA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,OAPA;;AASA;AACA,oBADA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,OAPA;;AASA,GA9UA;;AAgVA;AACA,QADA,gBACA,GADA,EACA;AACA;AACA,KAHA;;AAKA,UALA,oBAKA;AACA;AACA;AACA;AACA,KATA;;AAWA,eAXA,yBAWA;AACA;AACA,KAbA;;AAeA,iBAfA,2BAeA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAFA,EAEA,KAFA,CAEA;AACA;AACA,OAJA;AAKA,KAzBA;;AA2BA,QA3BA,kBA2BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAJA,MAIA;AACA;AACA;AACA,KAxCA;;AA0CA,iBA1CA,yBA0CA,CA1CA,EA0CA,CA1CA,EA0CA;AACA;AACA;AACA,aADA;AAEA,aAFA;AAGA,OAHA,GAGA,QAHA,EAGA,WAHA;AAIA,kBANA,CAMA;;AAEA;AACA,KAnDA;;AAqDA,aArDA,qBAqDA,MArDA,EAqDA;AACA,wBADA,CACA;;AAEA,oBAHA,CAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAFA,MAEA;AACA;AACA;;AAEA;AACA,kBA1BA;;AA4BA,OA7BA;AA8BA;AACA,KA1FA;;AA4FA,QA5FA,kBA4FA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAFA;AAGA;AACA;AACA;AACA,SAFA;AAGA,OAJA;AAKA,KAhHA;;AAkHA,SAlHA,iBAkHA,CAlHA,EAkHA;AACA,qBADA,CACA;AADA;;;;AAMA,kBANA,CAIA,CAJA,eAIA,CAJA,CAKA,CALA,eAKA,CALA;AAOA;AACA,8BARA,CAQA;;AAEA;AACA;;AAEA;AACA;AACA,yCAFA,CAEA;;AAEA;AACA,gBADA;AAEA,gBAFA;;;AAKA;AACA,iCADA,CACA;AACA;AACA;AACA,SAbA,MAaA;AACA;AACA;AACA;AACA,OApBA,EAVA,CA8BA;;AAEA;AACA;AACA,uDADA,CACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aALA,MAKA;AACA;AACA;AACA;AACA,WAXA,MAWA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KA1KA;;AA4KA,QA5KA,gBA4KA,CA5KA,EA4KA;;;;AAIA,kBAJA,CAEA,CAFA,gBAEA,CAFA,CAGA,CAHA,gBAGA,CAHA;;AAMA;AACA,sBADA,CACA;;AAEA;;AAEA;AACA;AACA,uFAFA,CAEA;;AAEA;AACA;AACA;AACA;AACA,SARA,MAQA;AACA;AACA,SAfA,CAeA;;;AAGA;;AAEA;AACA;AACA,KAxMA;;AA0MA,OA1MA,eA0MA,CA1MA,EA0MA;AACA;;AAEA;AACA,uBADA,CACA;AACA;;AAEA;AACA;AACA,KAnNA;;AAqNA,aArNA,uBAqNA;AACA;AACA;AACA;AACA;AACA,SAHA;AAIA;AACA;AACA,mCADA;AAEA;AACA;AACA,aAJA;AAKA;AACA;AACA,aAPA;AAQA,gBARA;AASA,SAVA;AAWA,OAhBA;AAiBA,KAvOA;;AAyOA,cAzOA,wBAyOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BADA;AAEA,iCAFA;AAGA,yBAHA;AAIA,yBAJA;AAKA,yBALA;AAMA,yBANA;AAOA,mCAPA;AAQA,uCARA;;AAUA;;AAEA;AACA;AACA,4BADA;AAEA,+BAFA;AAGA,iCAHA;AAIA,uCAJA;AAKA,yBALA;AAMA,yBANA;AAOA,yBAPA;AAQA,yBARA;AASA,mCATA;;AAWA,oBA1BA;;AA4BA,SA/BA;;AAiCA;AACA;AACA,2BADA;AAEA,+BAFA;;;AAKA;AACA;AACA;;AAEA;AACA,SAXA,MAWA;AACA;AACA,2BADA;AAEA,iCAFA;;AAIA;;AAEA;AACA,OArDA;AAsDA,KAhSA;;AAkSA,cAlSA,sBAkSA,KAlSA,EAkSA;AACA;;AAEA;AACA;AACA;;AAEA,kBAPA,CAOA;;AAEA;AACA,KA5SA;;AA8SA,iBA9SA,yBA8SA,KA9SA,EA8SA;AACA;AACA;AACA,kBAHA,CAGA;;AAEA;AACA,KApTA;;AAsTA,iBAtTA,yBAsTA,QAtTA,EAsTA;AACA;;AAEA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA;;AAEA,kBAXA,CAWA;;AAEA;AACA,KApUA;;AAsUA,eAtUA,yBAsUA;AACA;AACA;AACA;AACA,oBAJA,CAIA;;AAEA,yBANA,CAMA;AACA,KA7UA,EAhVA,E;;;;;;;;;;;;;ACrUA;AAAA;AAAA;AAAA;AAA87B,CAAgB,w7BAAG,EAAC,C;;;;;;;;;;;ACAl9B;AACA,OAAO,KAAU,EAAE,kBAKd","file":"components/canvas-drag/index.js","sourcesContent":["import { render, staticRenderFns, recyclableRender, components } from \"./index.vue?vue&type=template&id=5cd633be&\"\nvar renderjs\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\runtime\\\\componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"components/canvas-drag/index.vue\"\nexport default component.exports","export * from \"-!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\templateLoader.js??vue-loader-options!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--16-0!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\template.js!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-app-loader\\\\page-meta.js!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=template&id=5cd633be&\"","var components\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--12-1!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=script&lang=js&\"","<template>\r\n\t<canvas canvas-id=\"canvas-drag\" disable-scroll=\"true\" @touchstart=\"start\" @touchmove=\"move\" @touchend=\"end\" :style=\"'width: ' + width + 'rpx; height: ' + height + 'rpx;'\"></canvas>\r\n</template>\r\n\r\n<script>\r\n// components/canvas-drag/index.js\nlet DELETE_ICON = '../pages/index/static/api.png'; // 删除按钮\r\n// 删除按钮\nlet DRAG_ICON = '../pages/index/static/api.png'; // 缩放按钮\r\n// 缩放按钮\nconst STROKE_COLOR = 'red';\r\nconst ROTATE_ENABLED = true;\r\nlet isMove = false; // 标识触摸后是否有移动，用来判断是否需要增加操作历史\r\n// 标识触摸后是否有移动，用来判断是否需要增加操作历史\nconst DEBUG_MODE = false; // 打开调试后会渲染操作区域边框（无背景时有效）\r\n// 打开调试后会渲染操作区域边框（无背景时有效）\nconst dragGraph = function ({\n  x = 30,\n  y = 30,\n  w,\n  h,\n  type,\n  text,\n  fontSize = 20,\n  color = 'red',\n  url = null,\n  rotate = 0,\n  sourceId = null,\n  selected = true\n}, canvas, factor) {\n  if (type === 'text') {\n    canvas.setFontSize(fontSize);\n    const textWidth = canvas.measureText(text).width;\n    const textHeight = fontSize + 10;\n    this.centerX = x + textWidth / 2;\n    this.centerY = y + textHeight / 2;\n    this.w = textWidth;\n    this.h = textHeight;\n  } else {\n    this.centerX = x + w / 2;\n    this.centerY = y + h / 2;\n    this.w = w;\n    this.h = h;\n  }\n\n  this.x = x;\n  this.y = y; // 4个顶点坐标\n\n  this.square = [[this.x, this.y], [this.x + this.w, this.y], [this.x + this.w, this.y + this.h], [this.x, this.y + this.h]];\n  this.fileUrl = url;\n  this.text = text;\n  this.fontSize = fontSize;\n  this.color = color;\n  this.ctx = canvas;\n  this.rotate = rotate;\n  this.type = type;\n  this.selected = selected;\n  this.factor = factor;\n  this.sourceId = sourceId;\n  this.MIN_WIDTH = 20;\n  this.MIN_FONTSIZE = 10;\n};\r\ndragGraph.prototype = {\n  /**\r\n   * 绘制元素\r\n   */\n  paint() {\n    this.ctx.save(); // 由于measureText获取文字宽度依赖于样式，所以如果是文字元素需要先设置样式\n\n    let textWidth = 0;\n    let textHeight = 0;\n\n    if (this.type === 'text') {\n      this.ctx.setFontSize(this.fontSize);\n      this.ctx.setTextBaseline('middle');\n      this.ctx.setTextAlign('center');\n      this.ctx.setFillStyle(this.color);\n      textWidth = this.ctx.measureText(this.text).width;\n      textHeight = this.fontSize + 10; // 字体区域中心点不变，左上角位移\n\n      this.x = this.centerX - textWidth / 2;\n      this.y = this.centerY - textHeight / 2;\n    } // 旋转元素\n\n\n    this.ctx.translate(this.centerX, this.centerY);\n    this.ctx.rotate(this.rotate * Math.PI / 180);\n    this.ctx.translate(-this.centerX, -this.centerY); // 渲染元素\n\n    if (this.type === 'text') {\n      this.ctx.fillText(this.text, this.centerX, this.centerY);\n    } else if (this.type === 'image') {\n      this.ctx.drawImage(this.fileUrl, this.x, this.y, this.w, this.h);\n    } // 如果是选中状态，绘制选择虚线框，和缩放图标、删除图标\n\n\n    if (this.selected) {\n      this.ctx.setLineDash([2, 5]);\n      this.ctx.setLineWidth(2);\n      this.ctx.setStrokeStyle(STROKE_COLOR);\n      this.ctx.lineDashOffset = 6;\n\n      if (this.type === 'text') {\n        this.ctx.strokeRect(this.x, this.y, textWidth, textHeight);\n        this.ctx.drawImage(DELETE_ICON, this.x - 15, this.y - 15, 30, 30);\n        this.ctx.drawImage(DRAG_ICON, this.x + textWidth - 15, this.y + textHeight - 15, 30, 30);\n      } else {\n        this.ctx.strokeRect(this.x, this.y, this.w, this.h);\n        this.ctx.drawImage(DELETE_ICON, this.x - 15, this.y - 15, 30, 30);\n        this.ctx.drawImage(DRAG_ICON, this.x + this.w - 15, this.y + this.h - 15, 30, 30);\n      }\n    }\n\n    this.ctx.restore();\n  },\n\n  /**\r\n   * 给矩形描边\r\n   * @private\r\n   */\n  _drawBorder() {\n    let p = this.square;\n    let ctx = this.ctx;\n    this.ctx.save();\n    this.ctx.beginPath();\n    ctx.setStrokeStyle('orange');\n\n    this._draw_line(this.ctx, p[0], p[1]);\n\n    this._draw_line(this.ctx, p[1], p[2]);\n\n    this._draw_line(this.ctx, p[2], p[3]);\n\n    this._draw_line(this.ctx, p[3], p[0]);\n\n    ctx.restore();\n  },\n\n  /**\r\n   * 画一条线\r\n   * @param ctx\r\n   * @param a\r\n   * @param b\r\n   * @private\r\n   */\n  _draw_line(ctx, a, b) {\n    ctx.moveTo(a[0], a[1]);\n    ctx.lineTo(b[0], b[1]);\n    ctx.stroke();\n  },\n\n  /**\r\n   * 判断点击的坐标落在哪个区域\r\n   * @param {*} x 点击的坐标\r\n   * @param {*} y 点击的坐标\r\n   */\n  isInGraph(x, y) {\n    // 删除区域左上角的坐标和区域的高度宽度\n    const delW = 30;\n    const delH = 30; // 旋转后的删除区域坐标\n\n    const transformedDelCenter = this._rotatePoint(this.x, this.y, this.centerX, this.centerY, this.rotate);\n\n    const transformDelX = transformedDelCenter[0] - delW / 2;\n    const transformDelY = transformedDelCenter[1] - delH / 2; // 变换区域左上角的坐标和区域的高度宽度\n\n    const scaleW = 30;\n    const scaleH = 30;\n\n    const transformedScaleCenter = this._rotatePoint(this.x + this.w, this.y + this.h, this.centerX, this.centerY, this.rotate); // 旋转后的变换区域坐标\n\n\n    const transformScaleX = transformedScaleCenter[0] - scaleW / 2;\n    const transformScaleY = transformedScaleCenter[1] - scaleH / 2; // 调试使用，标识可操作区域\n\n    if (DEBUG_MODE) {\n      // 标识删除按钮区域\n      this.ctx.setLineWidth(1);\n      this.ctx.setStrokeStyle('red');\n      this.ctx.strokeRect(transformDelX, transformDelY, delW, delH); // 标识旋转/缩放按钮区域\n\n      this.ctx.setLineWidth(1);\n      this.ctx.setStrokeStyle('black');\n      this.ctx.strokeRect(transformScaleX, transformScaleY, scaleW, scaleH); // 标识移动区域\n\n      this._drawBorder();\n    }\n\n    if (x - transformScaleX >= 0 && y - transformScaleY >= 0 && transformScaleX + scaleW - x >= 0 && transformScaleY + scaleH - y >= 0) {\n      // 缩放区域\n      return 'transform';\n    } else if (x - transformDelX >= 0 && y - transformDelY >= 0 && transformDelX + delW - x >= 0 && transformDelY + delH - y >= 0) {\n      // 删除区域\n      return 'del';\n    } else if (this.insidePolygon(this.square, [x, y])) {\n      return 'move';\n    } // 不在选择区域里面\n\n\n    return false;\n  },\n\n  /**\r\n   *  判断一个点是否在多边形内部\r\n   *  @param points 多边形坐标集合\r\n   *  @param testPoint 测试点坐标\r\n   *  返回true为真，false为假\r\n   *  */\n  insidePolygon(points, testPoint) {\n    let x = testPoint[0],\n        y = testPoint[1];\n    let inside = false;\n\n    for (let i = 0, j = points.length - 1; i < points.length; j = i++) {\n      let xi = points[i][0],\n          yi = points[i][1];\n      let xj = points[j][0],\n          yj = points[j][1];\n      let intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  },\n\n  /**\r\n   * 计算旋转后矩形四个顶点的坐标（相对于画布）\r\n   * @private\r\n   */\n  _rotateSquare() {\n    this.square = [this._rotatePoint(this.x, this.y, this.centerX, this.centerY, this.rotate), this._rotatePoint(this.x + this.w, this.y, this.centerX, this.centerY, this.rotate), this._rotatePoint(this.x + this.w, this.y + this.h, this.centerX, this.centerY, this.rotate), this._rotatePoint(this.x, this.y + this.h, this.centerX, this.centerY, this.rotate)];\n  },\n\n  /**\r\n   * 计算旋转后的新坐标（相对于画布）\r\n   * @param x\r\n   * @param y\r\n   * @param centerX\r\n   * @param centerY\r\n   * @param degrees\r\n   * @returns {*[]}\r\n   * @private\r\n   */\n  _rotatePoint(x, y, centerX, centerY, degrees) {\n    let newX = (x - centerX) * Math.cos(degrees * Math.PI / 180) - (y - centerY) * Math.sin(degrees * Math.PI / 180) + centerX;\n    let newY = (x - centerX) * Math.sin(degrees * Math.PI / 180) + (y - centerY) * Math.cos(degrees * Math.PI / 180) + centerY;\n    return [newX, newY];\n  },\n\n  /**\r\n   *\r\n   * @param {*} px 手指按下去的坐标\r\n   * @param {*} py 手指按下去的坐标\r\n   * @param {*} x 手指移动到的坐标\r\n   * @param {*} y 手指移动到的坐标\r\n   * @param {*} currentGraph 当前图层的信息\r\n   */\n  transform(px, py, x, y, currentGraph) {\n    // 获取选择区域的宽度高度\n    if (this.type === 'text') {\n      this.ctx.setFontSize(this.fontSize);\n      const textWidth = this.ctx.measureText(this.text).width;\n      const textHeight = this.fontSize + 10;\n      this.w = textWidth;\n      this.h = textHeight; // 字体区域中心点不变，左上角位移\n\n      this.x = this.centerX - textWidth / 2;\n      this.y = this.centerY - textHeight / 2;\n    } else {\n      this.centerX = this.x + this.w / 2;\n      this.centerY = this.y + this.h / 2;\n    }\n\n    const diffXBefore = px - this.centerX;\n    const diffYBefore = py - this.centerY;\n    const diffXAfter = x - this.centerX;\n    const diffYAfter = y - this.centerY;\n    const angleBefore = Math.atan2(diffYBefore, diffXBefore) / Math.PI * 180;\n    const angleAfter = Math.atan2(diffYAfter, diffXAfter) / Math.PI * 180; // 旋转的角度\n\n    if (ROTATE_ENABLED) {\n      this.rotate = currentGraph.rotate + angleAfter - angleBefore;\n    }\n\n    const lineA = Math.sqrt(Math.pow(this.centerX - px, 2) + Math.pow(this.centerY - py, 2));\n    const lineB = Math.sqrt(Math.pow(this.centerX - x, 2) + Math.pow(this.centerY - y, 2));\n\n    if (this.type === 'image') {\n      let resize_rito = lineB / lineA;\n      let new_w = currentGraph.w * resize_rito;\n      let new_h = currentGraph.h * resize_rito;\n\n      if (currentGraph.w < currentGraph.h && new_w < this.MIN_WIDTH) {\n        new_w = this.MIN_WIDTH;\n        new_h = this.MIN_WIDTH * currentGraph.h / currentGraph.w;\n      } else if (currentGraph.h < currentGraph.w && new_h < this.MIN_WIDTH) {\n        new_h = this.MIN_WIDTH;\n        new_w = this.MIN_WIDTH * currentGraph.w / currentGraph.h;\n      }\n\n      this.w = new_w;\n      this.h = new_h;\n      this.x = currentGraph.x - (new_w - currentGraph.w) / 2;\n      this.y = currentGraph.y - (new_h - currentGraph.h) / 2;\n    } else if (this.type === 'text') {\n      const fontSize = currentGraph.fontSize * ((lineB - lineA) / lineA + 1);\n      this.fontSize = fontSize <= this.MIN_FONTSIZE ? this.MIN_FONTSIZE : fontSize; // 旋转位移后重新计算坐标\n\n      this.ctx.setFontSize(this.fontSize);\n      const textWidth = this.ctx.measureText(this.text).width;\n      const textHeight = this.fontSize + 10;\n      this.w = textWidth;\n      this.h = textHeight; // 字体区域中心点不变，左上角位移\n\n      this.x = this.centerX - textWidth / 2;\n      this.y = this.centerY - textHeight / 2;\n    }\n  },\n\n  toPx(rpx) {\n    return rpx * this.factor;\n  }\n\n};\r\n\r\nexport default {\n  data() {\n    return {\r\n\t\tbgImage: '',\n\t\thistory: []\n    };\n  },\n\n  components: {},\n  props: {\n    graph: {\n      type: Object,\n      default: () => ({})\n    },\n    bgColor: {\n      type: String,\n      default: ''\n    },\n    bgSourceId: {\n      type: String,\n      default: ''\n    },\n    width: {\n      type: Number,\n      default: 750\n    },\n    height: {\n      type: Number,\n      default: 750\n    },\n    enableUndo: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    graph: {\n      handler: 'onGraphChange',\n      deep: true\n    }\n  },\n\n  /**\r\n   * 绘制元素\r\n   */\n  paint() {\n    this.ctx.save(); // 由于measureText获取文字宽度依赖于样式，所以如果是文字元素需要先设置样式\n\n    let textWidth = 0;\n    let textHeight = 0;\n\n    if (this.type === 'text') {\n      this.ctx.setFontSize(this.fontSize);\n      this.ctx.setTextBaseline('middle');\n      this.ctx.setTextAlign('center');\n      this.ctx.setFillStyle(this.color);\n      textWidth = this.ctx.measureText(this.text).width;\n      textHeight = this.fontSize + 10; // 字体区域中心点不变，左上角位移\n\n      this.x = this.centerX - textWidth / 2;\n      this.y = this.centerY - textHeight / 2;\n    } // 旋转元素\n\n\n    this.ctx.translate(this.centerX, this.centerY);\n    this.ctx.rotate(this.rotate * Math.PI / 180);\n    this.ctx.translate(-this.centerX, -this.centerY); // 渲染元素\n\n    if (this.type === 'text') {\n      this.ctx.fillText(this.text, this.centerX, this.centerY);\n    } else if (this.type === 'image') {\n      this.ctx.drawImage(this.fileUrl, this.x, this.y, this.w, this.h);\n    } // 如果是选中状态，绘制选择虚线框，和缩放图标、删除图标\n\n\n    if (this.selected) {\n      this.ctx.setLineDash([2, 5]);\n      this.ctx.setLineWidth(2);\n      this.ctx.setStrokeStyle(STROKE_COLOR);\n      this.ctx.lineDashOffset = 6;\n\n      if (this.type === 'text') {\n        this.ctx.strokeRect(this.x, this.y, textWidth, textHeight);\n        this.ctx.drawImage(DELETE_ICON, this.x - 15, this.y - 15, 30, 30);\n        this.ctx.drawImage(DRAG_ICON, this.x + textWidth - 15, this.y + textHeight - 15, 30, 30);\n      } else {\n        this.ctx.strokeRect(this.x, this.y, this.w, this.h);\n        this.ctx.drawImage(DELETE_ICON, this.x - 15, this.y - 15, 30, 30);\n        this.ctx.drawImage(DRAG_ICON, this.x + this.w - 15, this.y + this.h - 15, 30, 30);\n      }\n    }\n\n    this.ctx.restore();\n  },\n\n  /**\r\n   * 给矩形描边\r\n   * @private\r\n   */\n  _drawBorder() {\n    let p = this.square;\n    let ctx = this.ctx;\n    this.ctx.save();\n    this.ctx.beginPath();\n    ctx.setStrokeStyle('orange');\n\n    this._draw_line(this.ctx, p[0], p[1]);\n\n    this._draw_line(this.ctx, p[1], p[2]);\n\n    this._draw_line(this.ctx, p[2], p[3]);\n\n    this._draw_line(this.ctx, p[3], p[0]);\n\n    ctx.restore();\n  },\n\n  /**\r\n   * 画一条线\r\n   * @param ctx\r\n   * @param a\r\n   * @param b\r\n   * @private\r\n   */\n  _draw_line(ctx, a, b) {\n    ctx.moveTo(a[0], a[1]);\n    ctx.lineTo(b[0], b[1]);\n    ctx.stroke();\n  },\n\n  /**\r\n   * 判断点击的坐标落在哪个区域\r\n   * @param {*} x 点击的坐标\r\n   * @param {*} y 点击的坐标\r\n   */\n  isInGraph(x, y) {\n    // 删除区域左上角的坐标和区域的高度宽度\n    const delW = 30;\n    const delH = 30; // 旋转后的删除区域坐标\n\n    const transformedDelCenter = this._rotatePoint(this.x, this.y, this.centerX, this.centerY, this.rotate);\n\n    const transformDelX = transformedDelCenter[0] - delW / 2;\n    const transformDelY = transformedDelCenter[1] - delH / 2; // 变换区域左上角的坐标和区域的高度宽度\n\n    const scaleW = 30;\n    const scaleH = 30;\n\n    const transformedScaleCenter = this._rotatePoint(this.x + this.w, this.y + this.h, this.centerX, this.centerY, this.rotate); // 旋转后的变换区域坐标\n\n\n    const transformScaleX = transformedScaleCenter[0] - scaleW / 2;\n    const transformScaleY = transformedScaleCenter[1] - scaleH / 2; // 调试使用，标识可操作区域\n\n    if (DEBUG_MODE) {\n      // 标识删除按钮区域\n      this.ctx.setLineWidth(1);\n      this.ctx.setStrokeStyle('red');\n      this.ctx.strokeRect(transformDelX, transformDelY, delW, delH); // 标识旋转/缩放按钮区域\n\n      this.ctx.setLineWidth(1);\n      this.ctx.setStrokeStyle('black');\n      this.ctx.strokeRect(transformScaleX, transformScaleY, scaleW, scaleH); // 标识移动区域\n\n      this._drawBorder();\n    }\n\n    if (x - transformScaleX >= 0 && y - transformScaleY >= 0 && transformScaleX + scaleW - x >= 0 && transformScaleY + scaleH - y >= 0) {\n      // 缩放区域\n      return 'transform';\n    } else if (x - transformDelX >= 0 && y - transformDelY >= 0 && transformDelX + delW - x >= 0 && transformDelY + delH - y >= 0) {\n      // 删除区域\n      return 'del';\n    } else if (this.insidePolygon(this.square, [x, y])) {\n      return 'move';\n    } // 不在选择区域里面\n\n\n    return false;\n  },\n\n  /**\r\n   *  判断一个点是否在多边形内部\r\n   *  @param points 多边形坐标集合\r\n   *  @param testPoint 测试点坐标\r\n   *  返回true为真，false为假\r\n   *  */\n  insidePolygon(points, testPoint) {\n    let x = testPoint[0],\n        y = testPoint[1];\n    let inside = false;\n\n    for (let i = 0, j = points.length - 1; i < points.length; j = i++) {\n      let xi = points[i][0],\n          yi = points[i][1];\n      let xj = points[j][0],\n          yj = points[j][1];\n      let intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  },\n\n  /**\r\n   * 计算旋转后矩形四个顶点的坐标（相对于画布）\r\n   * @private\r\n   */\n  _rotateSquare() {\n    this.square = [this._rotatePoint(this.x, this.y, this.centerX, this.centerY, this.rotate), this._rotatePoint(this.x + this.w, this.y, this.centerX, this.centerY, this.rotate), this._rotatePoint(this.x + this.w, this.y + this.h, this.centerX, this.centerY, this.rotate), this._rotatePoint(this.x, this.y + this.h, this.centerX, this.centerY, this.rotate)];\n  },\n\n  /**\r\n   * 计算旋转后的新坐标（相对于画布）\r\n   * @param x\r\n   * @param y\r\n   * @param centerX\r\n   * @param centerY\r\n   * @param degrees\r\n   * @returns {*[]}\r\n   * @private\r\n   */\n  _rotatePoint(x, y, centerX, centerY, degrees) {\n    let newX = (x - centerX) * Math.cos(degrees * Math.PI / 180) - (y - centerY) * Math.sin(degrees * Math.PI / 180) + centerX;\n    let newY = (x - centerX) * Math.sin(degrees * Math.PI / 180) + (y - centerY) * Math.cos(degrees * Math.PI / 180) + centerY;\n    return [newX, newY];\n  },\n\n  /**\r\n   *\r\n   * @param {*} px 手指按下去的坐标\r\n   * @param {*} py 手指按下去的坐标\r\n   * @param {*} x 手指移动到的坐标\r\n   * @param {*} y 手指移动到的坐标\r\n   * @param {*} currentGraph 当前图层的信息\r\n   */\n  transform(px, py, x, y, currentGraph) {\n    // 获取选择区域的宽度高度\n    if (this.type === 'text') {\n      this.ctx.setFontSize(this.fontSize);\n      const textWidth = this.ctx.measureText(this.text).width;\n      const textHeight = this.fontSize + 10;\n      this.w = textWidth;\n      this.h = textHeight; // 字体区域中心点不变，左上角位移\n\n      this.x = this.centerX - textWidth / 2;\n      this.y = this.centerY - textHeight / 2;\n    } else {\n      this.centerX = this.x + this.w / 2;\n      this.centerY = this.y + this.h / 2;\n    }\n\n    const diffXBefore = px - this.centerX;\n    const diffYBefore = py - this.centerY;\n    const diffXAfter = x - this.centerX;\n    const diffYAfter = y - this.centerY;\n    const angleBefore = Math.atan2(diffYBefore, diffXBefore) / Math.PI * 180;\n    const angleAfter = Math.atan2(diffYAfter, diffXAfter) / Math.PI * 180; // 旋转的角度\n\n    if (ROTATE_ENABLED) {\n      this.rotate = currentGraph.rotate + angleAfter - angleBefore;\n    }\n\n    const lineA = Math.sqrt(Math.pow(this.centerX - px, 2) + Math.pow(this.centerY - py, 2));\n    const lineB = Math.sqrt(Math.pow(this.centerX - x, 2) + Math.pow(this.centerY - y, 2));\n\n    if (this.type === 'image') {\n      let resize_rito = lineB / lineA;\n      let new_w = currentGraph.w * resize_rito;\n      let new_h = currentGraph.h * resize_rito;\n\n      if (currentGraph.w < currentGraph.h && new_w < this.MIN_WIDTH) {\n        new_w = this.MIN_WIDTH;\n        new_h = this.MIN_WIDTH * currentGraph.h / currentGraph.w;\n      } else if (currentGraph.h < currentGraph.w && new_h < this.MIN_WIDTH) {\n        new_h = this.MIN_WIDTH;\n        new_w = this.MIN_WIDTH * currentGraph.w / currentGraph.h;\n      }\n\n      this.w = new_w;\n      this.h = new_h;\n      this.x = currentGraph.x - (new_w - currentGraph.w) / 2;\n      this.y = currentGraph.y - (new_h - currentGraph.h) / 2;\n    } else if (this.type === 'text') {\n      const fontSize = currentGraph.fontSize * ((lineB - lineA) / lineA + 1);\n      this.fontSize = fontSize <= this.MIN_FONTSIZE ? this.MIN_FONTSIZE : fontSize; // 旋转位移后重新计算坐标\n\n      this.ctx.setFontSize(this.fontSize);\n      const textWidth = this.ctx.measureText(this.text).width;\n      const textHeight = this.fontSize + 10;\n      this.w = textWidth;\n      this.h = textHeight; // 字体区域中心点不变，左上角位移\n\n      this.x = this.centerX - textWidth / 2;\n      this.y = this.centerY - textHeight / 2;\n    }\n  },\n\n  toPx(rpx) {\n    return rpx * this.factor;\n  },\n\n  beforeMount() {\n    const sysInfo = wx.getSystemInfoSync();\n    const screenWidth = sysInfo.screenWidth;\n    this.factor = screenWidth / 750;\n\n    if (typeof this.drawArr === 'undefined') {\n      this.drawArr = [];\n    }\n\n    this.ctx = wx.createCanvasContext('canvas-drag', this);\n    this.draw();\n  },\n\r\n  created() {\r\n\tuni.downloadFile({\r\n\t\turl: DELETE_ICON, //仅为示例，并非真实的资源\r\n\t\tsuccess: (res) => {\r\n\t\t    if (res.statusCode === 200) {\r\n\t\t        console.log('下载成功：' + res.tempFilePath);\r\n\t\t\t\tDELETE_ICON = res.tempFilePath;\r\n\t\t    }\r\n\t\t}\r\n\t})\r\n\tuni.downloadFile({\r\n\t\turl: DRAG_ICON, //仅为示例，并非真实的资源\r\n\t\tsuccess: (res) => {\r\n\t\t    if (res.statusCode === 200) {\r\n\t\t        console.log('下载成功：' + res.tempFilePath);\r\n\t\t\t\tDRAG_ICON = res.tempFilePath;\r\n\t\t    }\r\n\t\t}\r\n\t})\r\n  },\r\n\n  methods: {\n    toPx(rpx) {\n      return rpx * this.factor;\n    },\n\n    initBg() {\n      this.bgColor = '';\n      this.bgSourceId = '';\n      this.bgImage = '';\n    },\n\n    initHistory() {\n      this.history = [];\n    },\n\n    recordHistory() {\n      if (!this.enableUndo) {\n        return;\n      }\n\n      this.exportJson().then(imgArr => {\n        this.history.push(JSON.stringify(imgArr));\n      }).catch(e => {\n        console.error(e);\n      });\n    },\n\n    undo() {\n      if (!this.enableUndo) {\n        console.log(`后退功能未启用，请设置enableUndo=\"{{true}}\"`);\n        return;\n      }\n\n      if (this.history.length > 1) {\n        this.history.pop();\n        let newConfigObj = this.history[this.history.length - 1];\n        this.initByArr(JSON.parse(newConfigObj));\n      } else {\n        console.log('已是第一步，不能回退');\n      }\n    },\n\n    onGraphChange(n, o) {\n      if (JSON.stringify(n) === '{}') return;\n      this.drawArr.push(new dragGraph(Object.assign({\n        x: 30,\n        y: 30\n      }, n), this.ctx, this.factor));\n      this.draw(); // 参数有变化时记录历史\n\n      this.recordHistory();\n    },\n\n    initByArr(newArr) {\n      this.drawArr = []; // 重置绘画元素\n\n      this.initBg(); // 重置绘画背景\n      // 循环插入 drawArr\n\n      newArr.forEach((item, index) => {\n        switch (item.type) {\n          case 'bgColor':\n            this.bgImage = '';\n            this.bgSourceId = '';\n            this.bgColor = item.color;\n            break;\n\n          case 'bgImage':\n            this.bgColor = '';\n            this.bgImage = item.url;\n\n            if (item.sourceId) {\n              this.bgSourceId = item.sourceId;\n            }\n\n            break;\n\n          case 'image':\n          case 'text':\n            if (index === newArr.length - 1) {\n              item.selected = true;\n            } else {\n              item.selected = false;\n            }\n\n            this.drawArr.push(new dragGraph(item, this.ctx, this.factor));\n            break;\n        }\n      });\n      this.draw();\n    },\n\n    draw() {\n      if (this.bgImage !== '') {\n        this.ctx.drawImage(this.bgImage, 0, 0, this.toPx(this.width), this.toPx(this.height));\n      }\n\n      if (this.bgColor !== '') {\n        this.ctx.save();\n        this.ctx.setFillStyle(this.bgColor);\n        this.ctx.fillRect(0, 0, this.toPx(this.width), this.toPx(this.height));\n        this.ctx.restore();\n      }\n\n      this.drawArr.forEach(item => {\n        item.paint();\n      });\n      return new Promise(resolve => {\n        this.ctx.draw(false, () => {\n          resolve();\n        });\n      });\n    },\n\n    start(e) {\n      isMove = false; // 重置移动标识\n\n      const {\n        x,\n        y\n      } = e.touches[0];\n      this.tempGraphArr = [];\n      let lastDelIndex = null; // 记录最后一个需要删除的索引\n\n      this.drawArr && this.drawArr.forEach((item, index) => {\n        const action = item.isInGraph(x, y);\n\n        if (action) {\n          item.action = action;\n          this.tempGraphArr.push(item); // 保存点击时的坐标\n\n          this.currentTouch = {\n            x,\n            y\n          };\n\n          if (action === 'del') {\n            lastDelIndex = index; // 标记需要删除的元素\r\n\t\t\titem.selected = true;\n          }\n        } else {\n          item.action = false;\n          item.selected = false;\n        }\n      }); // 保存点击时元素的信息\n\n      if (this.tempGraphArr.length > 0) {\n        for (let i = 0; i < this.tempGraphArr.length; i++) {\n          let lastIndex = this.tempGraphArr.length - 1; // 对最后一个元素做操作\n\n          if (i === lastIndex) {\n            // 未选中的元素，不执行删除和缩放操作\n            if (lastDelIndex !== null && this.tempGraphArr[i].selected) {\n              if (this.drawArr[lastDelIndex].action == 'del') {\n                this.drawArr.splice(lastDelIndex, 1);\n                this.ctx.clearRect(0, 0, this.toPx(this.width), this.toPx(this.height));\n              }\n            } else {\n              this.tempGraphArr[lastIndex].selected = true;\n              this.currentGraph = Object.assign({}, this.tempGraphArr[lastIndex]);\n            }\n          } else {\n            // 不是最后一个元素，不需要选中，也不记录状态\n            this.tempGraphArr[i].action = false;\n            this.tempGraphArr[i].selected = false;\n          }\n        }\n      }\n\n      this.draw();\n    },\n\n    move(e) {\n      const {\n        x,\n        y\n      } = e.touches[0];\n\n      if (this.tempGraphArr && this.tempGraphArr.length > 0) {\n        isMove = true; // 有选中元素，并且有移动时，设置移动标识\n\n        const currentGraph = this.tempGraphArr[this.tempGraphArr.length - 1];\n\n        if (currentGraph.action === 'move') {\n          currentGraph.centerX = this.currentGraph.centerX + (x - this.currentTouch.x);\n          currentGraph.centerY = this.currentGraph.centerY + (y - this.currentTouch.y); // 使用中心点坐标计算位移，不使用 x,y 坐标，因为会受旋转影响。\n\n          if (currentGraph.type !== 'text') {\n            currentGraph.x = currentGraph.centerX - this.currentGraph.w / 2;\n            currentGraph.y = currentGraph.centerY - this.currentGraph.h / 2;\n          }\n        } else if (currentGraph.action === 'transform') {\n          currentGraph.transform(this.currentTouch.x, this.currentTouch.y, x, y, this.currentGraph);\n        } // 更新4个坐标点（相对于画布的坐标系）\n\n\n        currentGraph._rotateSquare();\n\n        this.draw();\n      }\n    },\n\n    end(e) {\n      this.tempGraphArr = [];\n\n      if (isMove) {\n        isMove = false; // 重置移动标识\n        // 用户操作结束时记录历史\n\n        this.recordHistory();\n      }\n    },\n\n    exportFun() {\n      return new Promise((resolve, reject) => {\n        this.drawArr = this.drawArr.map(item => {\n          item.selected = false;\n          return item;\n        });\n        this.draw().then(() => {\n          wx.canvasToTempFilePath({\n            canvasId: 'canvas-drag',\n            success: res => {\n              resolve(res.tempFilePath);\n            },\n            fail: e => {\n              reject(e);\n            }\n          }, this);\n        });\n      });\n    },\n\n    exportJson() {\n      return new Promise((resolve, reject) => {\n        let exportArr = this.drawArr.map(item => {\n          item.selected = false;\n\n          switch (item.type) {\n            case 'image':\n              return {\n                type: 'image',\n                url: item.fileUrl,\n                y: item.y,\n                x: item.x,\n                w: item.w,\n                h: item.h,\n                rotate: item.rotate,\n                sourceId: item.sourceId\n              };\n              break;\n\n            case 'text':\n              return {\n                type: 'text',\n                text: item.text,\n                color: item.color,\n                fontSize: item.fontSize,\n                y: item.y,\n                x: item.x,\n                w: item.w,\n                h: item.h,\n                rotate: item.rotate\n              };\n              break;\n          }\n        });\n\n        if (this.bgImage) {\n          let tmp_img_config = {\n            type: 'bgImage',\n            url: this.bgImage\n          };\n\n          if (this.bgSourceId) {\n            tmp_img_config['sourceId'] = this.bgSourceId;\n          }\n\n          exportArr.unshift(tmp_img_config);\n        } else if (this.bgColor) {\n          exportArr.unshift({\n            type: 'bgColor',\n            color: this.bgColor\n          });\n        }\n\n        resolve(exportArr);\n      });\n    },\n\n    changColor(color) {\n      const selected = this.drawArr.filter(item => item.selected);\n\n      if (selected.length > 0) {\n        selected[0].color = color;\n      }\n\n      this.draw(); // 改变文字颜色时记录历史\n\n      this.recordHistory();\n    },\n\n    changeBgColor(color) {\n      this.bgImage = '';\n      this.bgColor = color;\n      this.draw(); // 改变背景颜色时记录历史\n\n      this.recordHistory();\n    },\n\n    changeBgImage(newBgImg) {\n      this.bgColor = '';\n\n      if (typeof newBgImg == 'string') {\n        this.bgSourceId = '';\n        this.bgImage = newBgImg;\n      } else {\n        this.bgSourceId = newBgImg.sourceId;\n        this.bgImage = newBgImg.url;\n      }\n\n      this.draw(); // 改变背景图片时记录历史\n\n      this.recordHistory();\n    },\n\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.toPx(this.width), this.toPx(this.height));\n      this.ctx.draw();\n      this.drawArr = [];\n      this.initBg(); // 重置绘画背景\n\n      this.initHistory(); // 清空历史记录\n    }\n\n  }\n};\r\n</script>\r\n<style>\r\n@import \"./index.css\";\r\n</style>","import mod from \"-!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!H:\\\\feng_file\\\\HBuilderX\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./index.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1631613241655\n      var cssReload = require(\"H:/feng_file/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"../../\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}